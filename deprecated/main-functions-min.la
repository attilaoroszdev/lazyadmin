#!/bin/bash
#
# Copyright © 2017-2025, Attila Orosz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

#This file fontains the functions providing basic functionality of the menu system
#Cusom "user functions" will be stored in $USER-DIR/user-function.la

if [[ -f $menu_file ]]; then

    echo "Setting menus..."

    menu_height=$(( $MAX_MENU_ITEMS + 3 ))

    if [[ $menu_height -gt 11 ]]; then

       menu_height=11

    fi

    if [[ $menu_height -lt 7 ]]; then

       menu_height=7

    fi

else

    clear
    echo
    echo "Looked for menus in:"
    echo $menu_file
    echo
    echo "Error: Cannot find menuentries file in default location. Exiting..."
    echo
    exit 65

fi


find_menu_type() { 
   OLDIFS="$IFS"
   IFS=$'\n'
   menutype=( `cat $menu_file | sed -n '/'_menutype'/{:a;n;/'_endmenutype'/q;p;ba}'` )
   IFS="$OLDIFS"
  }


#This function will read the menu entries from the menu entries file as set in defaults
read_menu_items() { 
    menuitem=$tab_pos
    subparent=$1
    subitem=$2

    if [[ $menutype == "simple" ]]; then

      ((menuitem++))
      ((subparent++))
      ((subitem++))

    fi

    menuentry=""

    if $sub_menu; then

       OLDIFS="$IFS"
       IFS=$'\n'
       menuentry=( `cat $menu_file | sed -n '/'_sub_menu$subparent$subitem'/{:a;n;/'_endsub_menu$subparent$subitem'/q;p;ba}'` )

       if $help_sub_menu; then

           menu_height=$HELP_SUB_MENU_HEIGHT

       else

           menu_height=$sub_menu_height

       fi

       IFS="$OLDIFS"

    else

        OLDIFS="$IFS"
        IFS=$'\n'
        menuentry=( `cat $menu_file | sed -n '/'_menu$menuitem'/{:a;n;/'_endmenu$menuitem'/q;p;ba}'` )
        let menu_height=$MAX_MENU_ITEMS+3
        IFS="$OLDIFS"

    fi

    if [[ $menu_height -lt 8 ]]; then
     menu_height=8

    fi

    if [[ $menu_height -gt 12 ]]; then
        menu_height=12

    fi

    menulength=${#menuentry[@]}
    let maxmenulength=$menu_height-3

    if [[ $menulength -gt $maxmenulength ]]; then

        for (( i=$maxmenulength; i<$menulength; i++ ))
        do
            unset "menuentry[$i]"
        done

    fi

    menulength=${#menuentry[@]}
}


set_command_builder_items() {     #Parse the argument list into the array, starting form the 3rd argument
    arrayoffset=2
    arraycounter=1

    for i in "$@"; do

      if [[ $arraycounter -gt $arrayoffset ]] && [[ $arraycounter -le 11 ]]; then

        let currentflagitem=$arraycounter-2
        menuentry[currentflagitem-1]="$currentflagitem - Set arg. $i"

      fi

      ((arraycounter++))

    done

    #Check if entries have already been written, by checking last element
    lastentry=${menuentry[${#menuentry[@]}-1]}
    if [[ "$lastentry" != "x - Delete set flags" ]]; then
      menuentry+=("m - Manually enter flags ")
      menuentry+=("c - Commit with flags")
      menuentry+=("x - Delete set flags")
    fi

    menulength=${#menuentry[@]}
}


write_flags_descriptor() {     cursor_pos=$(( $headerheight+$menu_height+$DESCRIPTOR_HEIGHT ))
    tput cup $cursor_pos $menuwidth
    echo -e "\033[1K"
    tput cup $cursor_pos 2

    case ${menuentry[$menu_pos]} in

        "m - Manually enter flags ")
            echo "Manually enter flags for the command specified"
        ;;
        "c - Commit with flags")
            echo "Finished entering flags, proceed with command"
        ;;
        "x - Delete set flags")
            echo "Clear list of set flags to start over again"
        ;;
        *)
            echo "Set the specified flag"
        ;;
    esac
  }


# read descriptor lines for menu items
read_descriptor() { 
  if [[ -z $menutype || $menutype == "old" ]]; then

    if $sub_menu; then

       OLDIFS="$IFS"
       IFS=$'\n'
       if [[ "$active_panel" == "right" ]]; then
          menudescentry=( `cat $menu_file | sed -n '/'_subrightpaneldesc'/{:a;n;/'_endsubrightpaneldesc'/q;p;ba}'` )
       else
          menudescentry=( `cat $menu_file | sed -n '/'_descsub_menu$1$2'/{:a;n;/'_enddescsub_menu$1$2'/q;p;ba}'` )
       fi
       IFS="$OLDIFS"

    else

      OLDIFS="$IFS"
      IFS=$'\n'
      if [[ "$active_panel" == "right" ]]; then
        menudescentry=( `cat $menu_file | sed -n '/'_rightpaneldesc'/{:a;n;/'_endrightpaneldesc'/q;p;ba}'` )
      else
        menudescentry=( `cat $menu_file | sed -n '/'_descmenu$tab_pos'/{:a;n;/'_enddescmenu$tab_pos'/q;p;ba}'` )
      fi
      IFS="$OLDIFS"

    fi
  
  else

       if [[ "$active_panel" == "right" ]]; then

          for (( n=0; n < $menulength; n++ )); do

            eval $(echo ${menuentry[n]} | sed 's:^:V1=":; /\:\:/ s::";V2=": ;s:$:":')
            menuentry[n]="$(echo $V1)"

          done

          OLDIFS="$IFS"
          IFS=$'\n'

          if $sub_menu; then
              menudescentry=( `cat $menu_file | sed -n '/'_subrightpaneldesc'/{:a;n;/'_endsubrightpaneldesc'/q;p;ba}'` )


          else
             menudescentry=( `cat $menu_file | sed -n '/'_rightpaneldesc'/{:a;n;/'_endrightpaneldesc'/q;p;ba}'` )


          fi

          IFS="$OLDIFS"

               
         


       else 
          for (( n=0; n < $menulength; n++ )); do

            eval $(echo ${menuentry[n]} | sed 's:^:V1=":; /\:\:/ s::";V2=": ;s:$:":')
            menuentry[n]="$(echo $V1)"
            menudescentry[n]="$(echo $V2)"

          done


           

        fi

  fi
}


# Load the items shown in the tab
read_tab_items() {     OLDIFS="$IFS"
    IFS=$'\n'

    if $alt_menu; then
       tabentry=( `cat $menu_file | sed -n '/'_sub_menutab$tab_pos$menu_pos'/{:a;n;/'_endsub_menutab$tab_pos$menu_pos'/q;p;ba}'` )
    else
       tabentry=( `cat $menu_file | sed -n '/'_menutab'/{:a;n;/'_endmenutab'/q;p;ba}'` )
    fi

    IFS="$OLDIFS"

    tablength=$(( ${#tabentry[@]} -1 ))

    if [[ $tablength -gt 9 ]]; then

      for (( i=10; i<$tablength+1; i++ ))
      do
          unset "tabentry[$i]"
      done

      tablength=9

    fi
}


read_rightpanel_items() {     OLDIFS="$IFS"
    IFS=$'\n'
    if $sub_menu; then
      rightpanelentry=( `cat $menu_file | sed -n '/'_subrightpanel'/{:a;n;/'_endsubrightpanel'/q;p;ba}'` )
    else
      rightpanelentry=( `cat $menu_file | sed -n '/'_rightpanel'/{:a;n;/'_endrightpanel'/q;p;ba}'` )
    fi
    IFS="$OLDIFS"

    rightpanellength=${#rightpanelentry[@]}
  }


read_help_rightpanel_items() {     OLDIFS="$IFS"
    IFS=$'\n'

    rightpanelentry=( `cat $menu_file | sed -n '/'_helprightpanel'/{:a;n;/'_endhelprightpanel'/q;p;ba}'` )

    IFS="$OLDIFS"

    rightpanellength=${#rightpanelentry[@]}
  }


#Display the menu tabs
write_tab_items() { 
    # Mpodify top line first, draw connectors

    if $displaylineconnectors; then

        horizontalconnectorposition=0

        tput cup $(( headerheight - 2 )) $horizontalconnectorposition

        for (( n=0; n < $tablength; n++ ))
        do
          if [[ n -eq $tab_pos ]]; then

              horizontalconnectorposition=$(( $horizontalconnectorposition + ${#tabentry[$tab_pos]} + 3 ))
              tput cup $(( headerheight - 2 )) $horizontalconnectorposition
              echo -n "┯"

          else

              horizontalconnectorposition=$(( $horizontalconnectorposition + ${#tabentry[n]} + 3 ))
              tput cup $(( headerheight - 2 )) $horizontalconnectorposition
              echo -n "┯"

          fi
      done

    fi

    # Then write out the tab items, with separators

    tput cup $(( headerheight - 1 )) 1
    for (( n=0; n <= $tablength; n++ ))
    do
      if [[ n -eq $tab_pos ]]; then

         echo -n -e "\e[00;30;47m ${tabentry[$tab_pos]} \e[00m"

        # Do not write separator after last item
        if [[ n -lt $tablength ]]; then
             echo -n "│"

         fi

     else

         echo -n " ${tabentry[n]} "

        # Do not write separator after last item
        if [[ n -lt $tablength ]]; then
             echo -n "│"

         fi

     fi
    done

    if $displaylineconnectors; then

        # Then draw connectors ont he bottom line
        horizontalconnectorposition=0

        tput cup $(( headerheight )) $horizontalconnectorposition

        for (( n=0; n < $tablength; n++ ))
        do
          if [[ n -eq $tab_pos ]]; then

              horizontalconnectorposition=$(( $horizontalconnectorposition + ${#tabentry[$tab_pos]} + 3 ))

              tput cup $(( headerheight )) $horizontalconnectorposition

              if $rightpanel && [[ $horizontalconnectorposition == $(( $menuwidth-$rightpanelwidth )) ]]; then

                  echo -n "┿"

              else

                  echo -n "┷"

              fi

          else

              horizontalconnectorposition=$(( $horizontalconnectorposition + ${#tabentry[n]} + 3 ))

              tput cup $(( headerheight )) $horizontalconnectorposition

              if $rightpanel && [[ $horizontalconnectorposition == $(( $menuwidth-$rightpanelwidth )) ]]; then

               echo -n "┿"

           else

               echo -n "┷"

           fi

       fi
    done

    fi
}


# Populate the drawn menu template with themenuitelms
write_menu_items() { 
    #draw the menu items
    #If the position is right, it changes the background.
    #As the variable does not get modified, this needs no resetting
    for (( n=0; n < $menulength; n++ ))
    do
    if [[ "${menuentry[n]}" == "skip" ]]; then

       ((n++))

    fi
    if [[ n -eq $menu_pos ]] && [[ "$active_panel" == "left" ]];then
      tput cup $(( n + $headerheight + 2 )) 2
      echo -e "\e[00;30;47m${menuentry[$menu_pos]}\e[00m"
    else
      tput cup $(( n + $headerheight + 2 )) 2
      echo "${menuentry[n]}"

    fi

    done

    cursor_pos=`tput lines`
    tput cup $cursor_pos 0}


# This is hardcoded for now.
# Might gonna get its own resource file in a future release
write_help_menu_items() { 
    menulength=0

    
    helpmenuentry[0]=""

    for (( n=0; n < $menulength; n++ ))
    do
       if [[ "${helpmenuentry[n]}" == "skip" ]]; then

           ((n++))

       fi
       if [[ n -eq $menu_pos ]] && [[ "$active_panel" == "left" ]];then

          tput cup $(( n + $headerheight + 2 )) 2
          echo -e "\e[00;30;47m${helpmenuentry[$menu_pos]}\e[00m"

      else

          tput cup $(( n + $headerheight + 2 )) 2
          echo "${helpmenuentry[n]}"

      fi

    done
}


# Draw rightpanel items
write_rightpanel_items() { 
    for (( n=0; n < $rightpanellength; n++ ))
    do
       if [[ "${rightpanelentry[n]}" == "skip" ]]; then

           ((n++))

       fi
       if [[ n -eq $menu_pos ]] && [[ "$active_panel" == "right" ]]; then
          tput cup $(( n + $headerheight + 2 )) $(( $menuwidth-$rightpanelwidth+3 ))
          echo -e "\e[00;30;47m${rightpanelentry[$menu_pos]}\e[00m"
      else
          tput cup $(( n + $headerheight + 2 )) $(( $menuwidth-$rightpanelwidth+3 ))
          echo "${rightpanelentry[n]}"

      fi
    done

    cursor_pos=`tput lines`
    tput cup $cursor_pos 0}


#Draws a line
draw_line() { 
    #draw line with the length of the screen/window width
    for (( i=0; i<$menuwidth; i++ ))
    do

      echo -n "━"

    done
    #cursor goes to next row
}


#clear menu area
clear_menu() { 
    for (( n=1; n<$menu_height; n++ ))
    do

      tput cup $(( n + $headerheight )) $(( $menuwidth-$rightpanelwidth-1 ))
      echo -e "\033[1K"

    done}


#Draws the outline of the menu, with spaces left out for inclusion of items
draw_menu() { 
    tput civis

    if $sub_flags_menu; then

      let menu_height=$menulength+3
      headerheight=$SUB_HEADER_HEIGHT;
      title=$sub_flags_menutitle

    else
    if $sub_menu; then

       if $help_sub_menu; then

           menu_height=$HELP_SUB_MENU_HEIGHT

       else

           menu_height=$sub_menu_height

       fi

       headerheight=$SUB_HEADER_HEIGHT;
       title=$sub_menutitle

    else

       menu_height=$(( $MAX_MENU_ITEMS + 3 ))
       headerheight=$MAIN_HEADER_HEIGHT
       title=$maintitle

    fi

    if [[ $menu_height -gt 12 ]]; then

       menu_height=12

    fi

    fi

    if [[ $menu_height -lt 8 ]]; then

    menu_height=8

    fi

    if $root; then

    title=$title$root_title
    fi

    ## Set width of screen and panels
    menuwidth=( `tput cols` - 1 )

    if ! $rightpanel; then
      rightpanelwidth=0
    fi

    leftpanelwidth=$(( $menuwidth-$rightpanelwidth ))

    #clear menu area. Should be done each time tabs or sub_menus are changed
    clear_menu

    #draw title
    cursor_pos=0
    tput cup $cursor_pos 0
    draw_line
    ((cursor_pos++))
    tput cup $cursor_pos 0
    #echo "│       "
    tput cup $cursor_pos $(( menuwidth/2 - (${#title}/2) ))

    #title must be set by function for sub_menus...
    if [[ "$root" != "true" ]]; then
      echo -e "\e[01m$title\e[00m"
    else
      echo -e "\e[01m\e[01;31m$title\e[00m"
    fi
    #tput cup $cursor_pos $menuwidth
    #echo "│"
    ((cursor_pos++))
    draw_line

    #Draw top and bottom border of menu tabs
    #Skip this for sub_menus
    if ! $sub_menu; then

      ((cursor_pos++))
      tput cup $cursor_pos 0
      #echo -n "│"
      tput cup $cursor_pos $menuwidth
      #echo "│"
      ((cursor_pos++))
      tput cup $cursor_pos 0
      draw_line

    fi

    # If rigth panel is on, draw its separator
    if $rightpanel; then

       cursor_pos=$headerheight

       if $rightpanel && $displaylineconnectors; then

           tput cup $cursor_pos $(( $menuwidth-$rightpanelwidth ))
           echo "┯"

       fi

       ((cursor_pos++))

       for (( i=0; i<menu_height; i++ ))
       do
           tput cup $cursor_pos $(( $menuwidth-$rightpanelwidth ))
           echo "│"
           ((cursor_pos++))
       done

    fi

    cursor_pos=$(( $headerheight+$menu_height ))

    tput cup $cursor_pos 0
    draw_line

    if $rightpanel && $displaylineconnectors; then

       tput cup $cursor_pos $(( $menuwidth-$rightpanelwidth ))
       echo "┷"

    fi

    (( cursor_pos+=$(( $DESCRIPTOR_HEIGHT+1 )) ))

    tput cup $cursor_pos 0
    draw_line
}


# Simply write a one line descriptor, as read from the menu file
write_descriptor() { 
    if [[ $menu_height -lt 8 ]]; then

        menu_height=8

    fi

    if [[ $menu_height -gt 12 ]]; then

        menu_height=12

    fi

    cursor_pos=$(( $headerheight+$menu_height+$DESCRIPTOR_HEIGHT ))
    tput cup $cursor_pos $menuwidth
    echo -e "\033[1K"
    tput cup $cursor_pos 2
    echo "${menudescentry[$menu_pos]}"
}


#Simply write a one line descriptor, as read from the menu file
write_help_descriptor() { 
     
    helpmenudescentry[0]=""
    
    cursor_pos=$(( $headerheight+$menu_height+$DESCRIPTOR_HEIGHT ))
    tput cup $cursor_pos $menuwidth
    echo -e "\033[1K"
    tput cup $cursor_pos 2

    if [[ "$active_panel" == "right" ]]; then

        echo "${menudescentry[$menu_pos]}"

    else

      echo "${helpmenudescentry[$menu_pos]}"

    fi}


# Causes the selector to jump to the "other end" of the menu, if reaching either the top or the bottom
infinite_menu() { 
    if [[ "$active_panel" == "right" ]]; then
      limit=$rightpanellength
    else
      limit=$menulength
    fi

    if [[ $menu_pos -ge $limit ]]; then
      menu_pos=0
    fi
    if [[ $menu_pos -lt 0 ]]; then
      menu_pos=$(( $limit-1 ))
    fi
}


infinite_tab() {    limit=$(( $tablength + 1 ))


    if [[ $tab_pos -eq $limit ]]; then
      tab_pos=0
      read_menu_items
      read_descriptor
    fi
    if [[ $tab_pos -lt 0 ]]; then
      tab_pos=$(( $limit -1 ))
      read_menu_items
      read_descriptor
    fi
}


# This function will invoke a sub_menu where you can set flags/arguments/parameters for the spcified command or function
# Call with parameters (args), like this:
#
# sub_menu_flags_function $tab_pos $menu_pos "Title" function_or_command_to_call 1st_flag 2nd_flag 3rd_flag 4th_flag 5th_flag
#
# sub_menu_flags_function currently supports five preset flags, this can be changed by modifying the menu structure below
#
pick_menu_item() { 
    # Credit for the below picking solution (first 5 lines) goes for eMPee584
    # where he has originally presented it in his answer on stackoverflow.com
    # It does allows to read both arrow keys and single characters from a keyboard
    #
    # original thread:
    #
    # http://stackoverflow.com/questions/10679188/casing-arrow-keys-in-bash
    #
    #Original comment lines:
    #
    #check for input
    #The picker sets the position of the highlighter.
    #Arrow keys are 3 character, but want to be able to read single chars too

    read -sN1 key # 1 char (not delimiter), silent
    read -sN1 -t 0.0001 k1 # timed reads to check for second third etc characters
    read -sN1 -t 0.0001 k2
    read -sN1 -t 0.0001 k3
    read -sN1 -t 0.0001 k4 # timed reads to check for second third etc characters
    read -sN1 -t 0.0001 k5
    read -sN1 -t 0.0001 k6
    key+=${k1}${k2}${k3}${k4}${k5}${k6}

    case $key in

       $'\e[A'|$'\e0A'|"w"|"W")

          #Double jump if run on skip
          if [[ "$active_panel" == "left" ]] && [[ "${menuentry[$menu_pos-1]}" == "skip" ]]; then
              ((menu_pos--))
          fi
          #Check for right panel too
          if [[ "$active_panel" == "right" ]] && [[ "${rightpanelentry[$menu_pos-1]}" == "skip" ]]; then
              ((menu_pos--))
          fi

          ((menu_pos--))
          ;;

          $'\e[B'|$'\e0B'|"s"|"S")

            #Double jump if running on skip
            if [[ "$active_panel" == "left" ]] && [[ "${menuentry[$menu_pos+1]}" == "skip" ]]; then
              ((menu_pos++))
            fi
            #Chexck for right panel too
            if [[ "$active_panel" == "right" ]] && [[ "${rightpanelentry[$menu_pos+1]}" == "skip" ]]; then
              ((menu_pos++))
            fi

            ((menu_pos++))
           ;;

          $'\e[D'|$'\e0D'|"a"|"A")

            if ! $sub_menu; then
              # if [[ $tab_pos -gt 0 ]]; then
                 clear_menu
                 menu_pos=0
                 ((tab_pos--))
             # fi
            fi
            ;;

         $'\e[C'|$'\e0C'|"d"|"D")
            if ! $sub_menu; then
           #   if [[ $tab_pos -lt $tablength ]]; then
                 clear_menu
                 menu_pos=0
                 ((tab_pos++))
           #  fi
            fi
            ;;
         $'\e[1;5C'|$'\e01;5C'|"r"|"R")
            if $rightpanel && [[ "$active_panel" == "left" ]]; then
             active_panel="right"
             menu_pos=0
            fi
            ;;
            $'\e[1;5D'|$'\e01;5D'|"l"|"L")
            if $rightpanel && [[ "$active_panel" == "right" ]]; then
             active_panel="left"
             menu_pos=0
            fi
            ;;

        [0-9])

            # If numeric input is selected
            if [[ $key -le $menulength ]] && [[ $key -ge 0 ]]; then
               ((key--))
               menu_pos=$key
                
               if [[ -z $functionstyle || $functionstyle == "old" ]]; then

                 if $sub_menu; then
                    subfunct$tab_pos$mainmenu_pos$key $tab_pos $menu_pos
                 else
                    funct$tab_pos$key $tab_pos $menu_pos
                 fi

               elif [[ $functionstyle == "simple" ]]; then


                 if $sub_menu; then
                    tab$(( $tab_pos+1 ))item$(( $mainmenu_pos+1 ))sub$(( $key+1 )) $tab_pos $menu_pos
                 else
                    tab$(( $tab_pos+1 ))item$(( $key+1 )) $tab_pos $menu_pos
                 fi

               
                
              fi

            fi

            init_menu
            ;;

          $'\x0a' | '')
           
            # If enter is pressed
            if [[ "$active_panel" == "right" ]]; then
              
              functright$menu_pos

            else


              if [[ -z $functionstyle || $functionstyle == "old" ]]; then          

                 if $sub_menu; then
                  
                     subfunct$tab_pos$mainmenu_pos$menu_pos $tab_pos $menu_pos
                 
                  else

                    funct$tab_pos$menu_pos $tab_pos $menu_pos

                  fi    

              elif [[ $functionstyle == "simple" ]]; then


                 if $sub_menu; then
                    tab$(( $tab_pos+1 ))item$(( $mainmenu_pos+1 ))sub$(( $menu_pos+1 )) $tab_pos $menu_pos
                 else
                    tab$(( $tab_pos+1 ))item$(( $menu_pos+1 )) $tab_pos $menu_pos
                 fi

               

                 
                fi
            fi

            init_menu
            ;;

        #right menu items (on keypress)
         "f" | "F") #put this into a function so that enter can be used, along with alias
            reflow_menu
            ;;
        
         "q" | "Q") #this handles exit function
            functright2
            ;;
         "b" | "B")
            if $sub_menu; then
               back_to_main_menu
               return
            fi
            ;;
         "e" | "E")
            if [[ $tab_pos == $tablength  ]]; then
              functsetup0
              init_menu
            fi
            ;;
         "u" | "U")
            if [[ $tab_pos == $tablength  ]]; then
              functsetup1
              init_menu
            fi
            ;;
            "m" | "M")
            if [[ $tab_pos == $tablength  ]]; then
              functsetup2
              init_menu
            fi
            ;;
            "v" | "V")
            if [[ $tab_pos == $tablength  ]]; then
              functsetup3
              init_menu
            fi
            ;;

            esac
}


pick_help_menu_item() { 
    read -sN1 key # 1 char (not delimiter), silent
    read -sN1 -t 0.0001 k1 # timed reads to check for second third etc characters
    read -sN1 -t 0.0001 k2
    read -sN1 -t 0.0001 k3
    read -sN1 -t 0.0001 k4 # timed reads to check for second third etc characters
    read -sN1 -t 0.0001 k5
    read -sN1 -t 0.0001 k6
    key+=${k1}${k2}${k3}${k4}${k5}${k6}

    case $key in

      $'\e[A'|$'\e0A'|"w"|"W")

         #Double jump if run on skip
         if [[ "$active_panel" == "left" ]] && [[ "${helpmenuentry[$menu_pos-1]}" == "skip" ]]; then
             ((menu_pos--))
         fi

        #Check for right panel skip
        if [[ "$active_panel" == "right" ]] && [[ "${rightpanelentry[$menu_pos-1]}" == "skip" ]]; then
          ((menu_pos--))
        fi

        ((menu_pos--))
        ;;

      $'\e[B'|$'\e0B'|"s"|"S")

        #Double jump if running on skip
        if [[ "$active_panel" == "left" ]] && [[ "${helpmenuentry[$menu_pos+1]}" == "skip" ]]; then
          ((menu_pos++))
        fi

        #Chexck for right panel skip
        if [[ "$active_panel" == "right" ]] && [[ "${rightpanelentry[$menu_pos+1]}" == "skip" ]]; then
          ((menu_pos++))
        fi

        ((menu_pos++))
        ;;
      $'\e[1;5C'|$'\e01;5C'|"r"|"R")
        if $rightpanel && [[ "$active_panel" == "left" ]]; then
          active_panel="right"
          menu_pos=0
        fi
        ;;
      $'\e[1;5D'|$'\e01;5D'|"l"|"L")
        if $rightpanel && [[ "$active_panel" == "right" ]]; then
          active_panel="left"
          menu_pos=0
        fi
      ;;

    [0-4])

        # If numeric input is selected
        if [[ $key -le 3 ]] && [[ $key -ge 0 ]]; then
           ((key--))
           menu_pos=$key
           functhelp$key

       fi
       ;;
     $'\x0a' | '')
        # If enter is pressed

        if [[ "$active_panel" == "right" ]]; then
          functright$menu_pos
      else

          functhelp$menu_pos

      fi
      init_menu
      ;;

        #right menu items (on keypress)
     "f" | "F") #put this into a function so that enter can be used, along with alias
        reflow_menu
        ;;
    "k" | "K")
      display_hotkeys
      ;;
    "q" | "Q") #this handles exit function
      functright2
      ;;
    'b' | "B")
        back_to_main_menu "read" "reflow"
      ;;

    esac}


# Command builder is a special case...
function menu_item_picker_subflags  { 
     read -sN1 key # 1 char (not delimiter), silent
     read -sN1 -t 0.0001 k1 # timed reads to check for second third etc characters
     read -sN1 -t 0.0001 k2
     read -sN1 -t 0.0001 k3
     read -sN1 -t 0.0001 k4 # timed reads to check for second third etc characters
     read -sN1 -t 0.0001 k5
     read -sN1 -t 0.0001 k6
     key+=${k1}${k2}${k3}${k4}${k5}${k6}

     case $key in

        $'\e[A'|$'\e0A'|"w"|"W")
          #Double jump if run on skip
        if [[ "${menuentry[$menu_pos-1]}" == "skip" ]]; then
          ((menu_pos--))
        fi
        ((menu_pos--))
        ;;
        $'\e[B'|$'\e0B'|"s"|"S")
        #Double jump if running on skip
        if [[ "${menuentry[$menu_pos+1]}" == "skip" ]]; then
          ((menu_pos++))
        fi
        ((menu_pos++))
        ;;

        [0-9])
          # If numeric input is selected
          let argstoset=$#-3
          if [[ $key -le "$argstoset+1" ]] && [[ $key -ge 0 ]]; then
                ((key+=2))

                set_args=$set_args' '${!key}
            fi
            ;;

       'm' | 'M')  echo
            tput cnorm
            echo "Type your arguments here, and press enter "
            echo
            read -p "> " lineargs
            set_args=$set_args' '$lineargs
            tput civis
            clear
            draw_menu
            ;;

        'c' | 'C')
            clear
            echo
            echo "Executing:"
            echo "$sub_menucommand $set_args"
            echo
            $sub_menucommand $set_args
            echo
            echo "Now press a key to get back to the menu"
            read -n 1 -s keypress
            sub_flags_menu=false
            back_to_main_menu
            ;;

        'x' | 'X') set_args=''
            clear
            draw_menu
            ;;

        $'\x0a' | '')
        # If enter is pressed
        if [[ "$active_panel" == "right" ]]; then

          functright$menu_pos

        else

                # Alllow maximum 9 items.
                # 9 have been written, but this counts the offset
                # in args instead of what was really selected
                # The total number of args is 11 (the title, command itself, then the
                # "real" args)
                maxlengthoffset=0;

                if [[ $# -gt 11 ]]; then

                    let lenghtdiff=$#-11
                    let maxlengthoffset=$maxlengthoffset+$lenghtdiff

                fi

                let argstoset=$#-3-$maxlengthoffset

                if [[ $menu_pos -le "$argstoset" ]] && [[ $menu_pos -ge 0 ]]; then

              #reference parameters by number according to menu_position
              let addarg=$menu_pos+3
              set_args=$set_args' '${@:$addarg:1}

                else

                    let manual_flags=$argstoset+1
                    let commit_flags=$argstoset+2
                    let delete_flags=$argstoset+3

                    case $menu_pos in

                       $manual_flags)  
                            echo
                            tput cnorm
                            echo "Type your arguments here, and press enter"
                            echo
                            read -p "> " lineargs
                            set_args=$set_args' '$lineargs
                            tput civis
                            clear
                            draw_menu
                            ;;

                        $commit_flags)
                            clear
                            echo "Executing:"
                            echo "$sub_menucommand $set_args"
                            echo
                            $sub_menucommand $set_args
                            echo
                            echo "Now press a key to get back to the menu"
                            read -n 1 -s keypress
                            sub_flags_menu=false
                            back_to_main_menu
                            ;;

                        $delete_flags) set_args=''
                            clear
                            draw_menu
                            ;;

                    esac
                fi

            fi
            ;;

        #switch between left and right menus

        $'\e[1;5C'|$'\e01;5C'|"r"|"R")
            if $rightpanel && [[ "$active_panel" == "left" ]]; then
            active_panel="right"
            menu_pos=0
            fi
            ;;
        $'\e[1;5D'|$'\e01;5D'|"l"|"L")
            if $rightpanel && [[ "$active_panel" == "right" ]]; then
            active_panel="left"
            menu_pos=0
            fi
            ;;

        #right menu items (on keypress)
        "f" | "F")
            reflow_menu
            ;;
        
        "q" | "Q")
          #this handles exit
          functright2
          ;;
        'b' | "B")
            sub_flags_menu=false
            back_to_main_menu "read"
            ;;

    esac
}


# This fnction will
# construct a sub_menu from the supplied arguments, from which
# the user can interactively build a command
#
# Arguments to supply:
# $1 - Title for the sub_menu
# $2 - base command to start the chain with. It can already contain preset arguments
# $3 - $11 - arguments to be represented as one of the possible 9 menu items.
#
# The arguments can contain more than one options, if supplied in quotes,
# it will be treated as a sibngle menu entry, such as passing e.g.
#
# "-c 5 --whatever_flag -f 8" as $4,
#
# will make
#
# -c 5 --whatever_flag -f 8
#
# the second menu entry. Selecting it will apply all the flags to the built chain
command_builder_function() { 
    menuentry=()

    set_args=""

    if $sub_menu; then

        remaininsub_menu=true
        oldsub_menutitle="$sub_menutitle"
        oldtab_pos=$tab_pos
        oldmainmenu_pos=$mainmenu_pos

    else

        remaininsub_menu=false

    fi

    sub_menu=true
    sub_flags_menu=true

    sub_flags_menutitle="$1"
    sub_menucommand="$2"
    sub_menucall="${@:3}"
    menu_pos=0

    #Have to empty the arguments each time, as set_sub_menu_function is not an "object", but just a single instance of a function.
    #Best avoid confusion

    clear

    set_command_builder_items "$@"

    read_rightpanel_items
    draw_menu
    while $sub_flags_menu; do

      set_command_builder_items "$@"

      read_rightpanel_items
      infinite_menu
      write_menu_items

      if $rightpanel; then
        write_rightpanel_items
      fi

      write_flags_descriptor

      echo
      echo

      ## TODO: Got to make sure this does not go ovber the screen limit
      echo "Active command: "$sub_menucommand $set_args

      #if [[ -n $set_args ]]; then
        #   echo "The active flags (args) are: $set_args"
      #else
      # echo "No flags (args) specified"
      #fi

       menu_item_picker_subflags "$@"

    done
    # sub_menu="$sourcesub_menu"
    # sub_flags_menu=false
}

    #Right panel functions
    #this is the standard reflow function

reflow_menu() { 
    clear
    draw_menu
    infinite_tab
    infinite_menu

    if $help_sub_menu; then
       
       write_help_menu_items
       write_help_descriptor
       
    else
       
       write_menu_items
       write_descriptor

    fi
}


display_hotkeys() { 
    display_markdown_help "$RES_DIR/shortkeys.md" "$RES_DIR/shortkeys.txt"
    reflow_menu
}

    # Calls the papproropriate help function, either the help sub_menu
    # or the single help file, depending on where the user is
display_help() { 
    if $sub_flags_menu; then

        functhelp_commanbuilder

        reflow_menu

    else

        enter_helpmenu

    fi
}


# Quits Lazy Admin, and restores the cursor, but only if
# not returning from a nested root shell
# (It is possible to run another shell of ladmin form within)
exit_la_menus() { 
    tput cnorm
    clear
    clear
    echo
    echo "$@"
    echo
    exit 0
}

    # Misleading function name (TODO:change it)
    # It will return to the calling menu, which can be a sub_menu in case of
    # help menu or command builder
back_to_main_menu() { 
    active_panel="left"
    menu_pos=0
    sub_flags_menu=false
    help_sub_menu=false

    if $remaininsub_menu; then

        sub_menu=true
        remaininsub_menu=false
        sub_menutitle="$oldsub_menutitle"
        tab_pos=$oldtab_pos
        mainmenu_pos=$oldmainmenu_pos

    else
      sub_menu=false

    fi

    if [[ $1 == "read" ]]; then

        read_menu_items
        read_descriptor

    fi

    read_rightpanel_items

    clear_menu

    if [[ $2 == "reflow" ]]; then

        reflow_menu

    fi

    return
}


# (Re)draws items of main menu and includes the picker
main_menu() { 
    sub_menu=false
    sub_flags_menu=false

    read_tab_items
    read_menu_items
    read_descriptor
    infinite_menu
    infinite_tab
    write_tab_items
    write_menu_items

    if $rightpanel; then
       write_rightpanel_items
    fi

    #Write basic description
    write_descriptor

    pick_menu_item
}


# Same as main menu, only this one invokes a sub_menu.
# TODO Could be consolidated into one function, with arguments too
# decide menu type
sub_menu() { 
    sub_menu=true
    sub_flags_menu=false

    read_tab_items
    read_menu_items $1 $2
    read_descriptor $1 $2
    infinite_menu

    write_menu_items

    if $rightpanel; then
       write_rightpanel_items
    fi

    #Write basic description
    write_descriptor

    pick_menu_item
}


# As above, only drawing a help menu
# TODO could be comnsolidated into one function, as above
help_menu() { 
    #sub_menu=true
    sub_flags_menu=false
    read_descriptor $1 $2
    infinite_menu
    write_help_menu_items

    if $rightpanel; then
       read_help_rightpanel_items

       write_rightpanel_items
    fi

    write_help_descriptor
    pick_help_menu_item
}


# Initialise a menu, before drawing for the foirst timed
# Will set menu item and title variable
init_menu() {     if [[ "$(whoami)" != "root" ]]; then
      root=false
    else
      root=true
    fi

    clear


    find_menu_type

    read_menu_items $1 $2
    read_descriptor $2 $2

    read_rightpanel_items
    draw_menu
}


# Initialises help menu before drawing for the first timed
# TODO: This could be consolidated into the similar function above
init_help_menu() { 
    if [[ "$(whoami)" != "root" ]]; then
      root=false
    else
      root=true
    fi

    clear

    read_descriptor $2 $2
    draw_menu
}


# This will be called whrn a sub_menu is selected
enter_sub_menu() { 
    remaininsub_menu=false;
    sub_menu=true
    sub_menutitle="$3"
    mainmenu_pos="$menu_pos"
    menu_pos=0

  
    init_menu $1 $2
    while $sub_menu; do
      #if ! $sub_menu; then
        #    break
        #fi
        sub_menu $1 $2
    done}


# This will be called when help menu is selected
enter_helpmenu() { 
    help_sub_menu=true

    if $sub_menu; then

        remaininsub_menu=true
        oldsub_menutitle="$sub_menutitle"
        oldtab_pos=$tab_pos
        oldmainmenu_pos=$mainmenu_pos

    else

        remaininsub_menu=false

    fi

    sub_menu=true
    sub_menutitle="Help"

    mainmenu_pos="$menu_pos"
    menu_pos=0

    init_help_menu
    while $help_sub_menu; do

      help_menu
    done
}


# Right panel functions. These function aliases are core functionality,
# so not really a part of the user aliases. This coudl change later
# so that users can easily alter right panel
function functright0 { 
    reflow_menu
}


function functright1 { 
    if [[ $sub_flags_menu ]]; then
      sub_flags_menu=false
    fi
 
    back_to_main_menu "read"
}


function functright2 { 
    if $root; then
      exit_la_menus "Leaving root shell"
    else

      exit_la_menus "Exiting..."
    fi
}


# Initialises and displays the main menu
# This is what the launcher calls, basically
main() { 
     for (( i=1; i<=$#; i++)); do

      j=$((i+1))

      case "${!i}" in
        
        # Can be extended with any number of arguments later, possibly to change defaults on the fly
        
      
        "--join-lines")
            
            if [[ "${!j}" == "off" ]]; then

              displaylineconnectors=false

            elif [[ "${!j}" == "on" ]]; then

              displaylineconnectors=true

            fi
          ;;
        *)
          #Do nothing
          ;;
      
      esac   

    done

  

    init_menu

    while true; do

     main_menu

    done}

