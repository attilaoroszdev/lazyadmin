#!/bin/bash
#
# Copyright Â© 2017-2025, Attila Orosz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

functionstyle="simple"

# fucntionstyle="simple" (default)
# Main menu functions in the format of tab$item$
# First tab is 1, first item is 1
# E.g.
# Fist tab first item is: tab1item1
# Second tab third menuitem is: tab2item3
#
# Backward compat:
# functionstyle="old"
# Main menu functions in the format of funct#tab#menuitem
# First tab is 0, first item is 0
# E.g.
# Fist tab first item is: funct00
# Second tab tird menuitem is: funct12


 
# You could implement your functions right here, but it is probably
# easier and less messy to put them in a separate file, and it will make
# them easier to reuse or reorganise in the menu

function tab1item1 {

	#call the built in, fantastic function example. o yeah
	example_function

}

function tab1item2 {

	#To invoke a submenu, you can use the enter_submenu function, as defined in `main-functions.la`. Give the menu title as a first argument, enclosd in ""
	enter_submenu $@ "Sample submenu title"
}


# Submenu functions. These will have a similar naming system, except
# they would be extended by submenu position as well,
#
# fucntionstyle="simple" (default)
# 
# Tab and menuitem are marked (in which submenu we are), 
# then sub-item number follows, starting from 1 like so:
# tab$item$sub$
# E.g.
# First tab, first menu item, first submenuu-item: tab1item1sub1
# Third tab, fourth menu item, second submenu item: tab3item4sub2
#
# Backward compat:
# functionstyle="old"
#
# Similar to main menus, only one digit more, starting from 0, like
# subfunct$$$
# or sunfunct$(tabposition)$(mainmenuposition)$(submenuposition)
#E.g. F
# First tab first menuitem, first submenuitem: subfunct000
# Third tab, fourth menuitem, second submenuitem: subfunct231
# and so on

function tab1item2sub1 {

	localhost_ping

}

function tab1item2sub2 {

	example_function

}

function tab1item2sub4 {

    # Here is an example of how to invoke the flag setting submenu
	#
	# Call command_builder_function with the following arguments:
	#
	# $1 - Title of submenu, enclosed in ""
	# $2 - Function to execute
	# $3 to $9 - A list of the flags entered literally
	#
	# Note 0: You could set 10 or more arguments, but the shortkeys
	# (i.e. using the keyboard to add the flags) wil only work up to nine
	# parameters
	#
	# Note 1: You can hard-code items that contain whitespace by placing
	# them in single or doune quotes. (See '-c 3' here) For flexibility
	# it might be better to only hardcode the first part and the optional
	# bit could be entered manually, using the "m - Enter flags manually"
	# functionality. I.e. You could pass -c as an argument, then set the
	# number manually, as in the last argument
	#
	# Note 2: You must literally enter all arguments, along with the
	# adequate number of hyphens (- or --)
	#
	# Note 3: The manual set option can be useful for setting the hostname/any
	# other argumenrt (in that case just take out the "localhost" bit
	# from the original function "flagtets_localhostping in this case)

	command_builder_function "Ping Localhost with flags" "ping localhost" -n -q -v --help '-c 5' -c
}

function tab1item2sub5 {

	dummy_function

}
function tab1item2sub6 {

	dummy_function

}

function tab1item3 {

		drop_to_shell

}

function tab1item4 {

	command_builder_function "Ping Localhost with flags" "ping localhost" -n -q -v --help '-c 5' -c

}

function tab1item5 {

    enter_root_shell

}

function tab2item1 {

dummy_function

}

function tab2item3 {
	dummy_function

}

function tab2item4 {
	dummy_function


}

function tab2item5 {
	dummy_function

}

function tab3item1 {

	dummy_function

}

function tab3item2 {

	dummy_function

}

function tab3item3 {

	dummy_function

}

function tab3item4 {

	dummy_function

}

function tab3item5 {

	dummy_function

}

function tab4item1 {

	dummy_function

}

function tab5item1 {

	dummy_function

}

function tab6item1 {

	functsetup0

}

function tab6item2 {

	functsetup1

}

function tab6item3 {

    functsetup2

}

function tab6item4 {

	functsetup3

}




# Only change these if you want tpo override help or setup functionality!

function functsetup0 {

    edit_setup_file "$USER_DIR/menu-entries.la"

}


function functsetup1 {

   	edit_setup_file "$USER_DIR/user-functions.la"

}


function functsetup2 {

    edit_setup_file "$USER_DIR/menu-bindings.la"

}


function functsetup3 {

   	edit_setup_file "$USER_DIR/user-defaults.la"

}



function functhelp0 {

    display_markdown_help "$RES_DIR/usage-guide.md" "$RES_DIR/usage-guide.txt"

}

function functhelp1 {

    display_markdown_help "$RES_DIR/configuration-guide.md" "$RES_DIR/configuration-guide.txt"

}


function functhelp2 {

    functhelp_commanbuilder

}

function functhelp_commanbuilder {

    display_markdown_help "$RES_DIR/command-builder-guide.md" "$RES_DIR/command-builder-guide.txt"

}
