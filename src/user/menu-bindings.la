#!/bin/bash
#
# Copyright Â© 2017-2025, Attila Orosz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

function_style="simple"

# Main menu functions in the "simple" format are: tab#item#
# First tab is 1, first item is 1
#
# For example:
# 1st tab 1st item is: tab1item1
# 2nd tab 3rd  menuitem is: tab2item3
#
# For submenus, you need to specify the parent menu item, and the submenu item
# number. 
#
# E.g. if 2nd tab 4th item has a submenu, the submenu items will be like:
# 1st submenu item: tab2item4sub1
# 2nd submenu item: tab2item4sub2
# 3rd submenu item: tab2item4sub3
# ...etc.
#
# You could implement your functions right here, but it is probably
# easier and less messy to put them into user-functions.la and just call funcion
# names form here. That will also make it easier to reuse or reorganise in the menu.




# Tab 1, menu item 7
# function tab1item7 { 
#     #To invoke a submenu, you can use the enter_submenu function, as defined in `main-functions.la`. Give the menu title as a first argument, enclosd in ""
#     enter_submenu 7

# }


# Tab 1, menu item 8
function tab1item8 { 
    # Here is an example of how to invoke the flag setting submenu
    #
    # Call command_builder_function with the following arguments:
    #
    # $1 - Title of submenu, enclosed in ""
    # $2 - Function to execute
    # $3 to $9 - A list of the flags entered literally
    #
    # Note 0: You could set 10 or more arguments, but the shortkeys
    # (i.e. using the keyboard to add the flags) wil only work up to nine
    # parameters
    #
    # Note 1: You can hard-code items that contain whitespace by placing
    # them in single or double quotes. (See '-c 3' here) For flexibility
    # it might be better to only hardcode the first part and the optional
    # bit could be entered manually, using the "m - Enter flags manually"
    # functionality. I.e. You could pass -c as an argument, then set the
    # number manually, as in the last argument
    #
    # Note 1.1: When manually entering paramenters, no whitespace will be added to it.
    # This is useful if you want to extend a hardcoded or previously entered parameter
    # If you want it to be a separate argument, start with space, wollowed by whatever you want to write.
    #
    # Note 1.2: Manually entered arguments can contain any number of white spaces
    #
    # Note 1.3: You must literally enter all arguments, along with the
    # adequate number of hyphens (- or --)
    #
    # Note 1.4: The manual set option can be useful for setting the hostname/any
    # other argument here, or anything at all, really
    #
    # Note 2: The command builder function can be used inside a submenu as well

    command_builder_function "Ping any host with flags" "ping" -n -q -v --help '-c 5' -c -n -q -v --help '-c 5' -c
}


# Tab 1, menu item 9 was skipepd



####################################################
#                                                  #
# These are completely useless (just placeholders) #
#                                                  #
####################################################

# Tab 3, menu item 1



########################
#                      #
# Setup tab at the end #
#                      #
########################

function tab6item1 { 
    functsetup0
}


function tab6item2 { 
    functsetup1
}


function tab6item3 { 
    functsetup2
}


function tab6item4 { 
    functsetup3
}


# Only change these if you want to override help or setup functionality!


