# Lazy Admin
#
# Copyright Â© 2017, Attila Orosz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.




# The following fuinctions are provided "as is", or, in this case, "are"..
# No guarantees that theY1ll evven work.
# They meant are to allow for opening stuff in new terminal tab, or terminal window.
# If your favourite terminal emulator uses different key combos, you might need to
# set those manually


# Use this at your own risk-...
function enter_root_shell {

     rootexitflag="true"
    # TODO check if sudo is installed AND user has sudo rights. if not, do it with su
    clear
    echo
    echo "Gaining privileges..."
    echo
    sudo ladmin "default" "false"

}





# This will enter a directory, execute a command or script, then return to the original directory
# Usage:
# run_function_in_tmp_directory "<target_tmp_:dir>" "<function_or_script>"
function run_function_in_tmp_directory {

    currentdirectory=$(pwd)
    cd $1
    $2
    cd $currentdirectory

}


# You will need to install xdotool for these.

# Usage: run_command_in_new_window "<command>"
# Can also be used in la-function-aliases, to run your cusotm command in a new tab
function run_command_in_new_tab {




    originallayout=$(setxkbmap -print | awk -F"+" '/xkb_symbols/ {print $2}')


    WID= xprop -root | grep "_NET_ACTIVE_WINDOW(WINDOW)"| awk '{print $5}'
    xdotool windowfocus $WID
    xdotool key ctrl+shift+t $WID


    # This is a workaround, for whne non-us layouts cause xdotool
    # to occasionally garble output (non-consistently, even within
    # the same session)
    setxkbmap -layout us

    sleep 1
    xdotool type --delay 1 --clearmodifiers "$1"
    xdotool key Return


     # If you find that the beow command does not set_add_info_line
    # the keyboard layout back correctly, you might manually need to
    # Set it back to your own preference
    # get the correct values with
    # setxkbmap -query
    # (You might need to set variant as well as model, etc)
    setxkbmap -layout $originallayout

}




# Usage: run_command_in_new_window "<command>"
# Can also be used in la-function-aliases, to run your cusotm command in a new tab
function run_command_in_new_window {

    originallayout=$(setxkbmap -print | awk -F"+" '/xkb_symbols/ {print $2}')


    WID= xprop -root | grep "_NET_ACTIVE_WINDOW(WINDOW)"| awk '{print $5}'
    xdotool windowfocus $WID
    xdotool key ctrl+shift+n $WID

        # This is a workaround, for whne non-us layouts cause xdotool
    # to occasionally garble output (non-consistently, even within
    # the same session)
    setxkbmap -layout us

    sleep 1
    xdotool type --delay 1 --clearmodifiers "$1"

    xdotool key Return

    # If you find that the beow command does not set_add_info_line
    # the keyboard layout back correctly, you might manually need to
    # Set it back to your own preference
    # get the correct values with
    # setxkbmap -query
    # (You might need to set variant as well as model, etc)
    setxkbmap -layout $originallayout



}
